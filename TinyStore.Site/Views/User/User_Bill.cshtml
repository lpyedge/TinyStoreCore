<q-page padding>
    <div class="text-h5 text-weight-bold text-grey-8">
        <q-icon :name="userlinks[2].icon" size="md" class="on-left"></q-icon>{{userlinks[2].text}}
    </div>
    <q-separator class="q-my-sm"></q-separator>
    <div class="row q-gutter-xs q-mx-none q-my-sm">
        @* <q-select outlined dense options-dense stack-label bg-color="white" *@
        @*           style="min-width: 240px" *@
        @*           class="col-xs-12 col-md-auto" *@
        @*           label="货源" *@
        @*           v-model="billFilter.supplyCurrent" *@
        @*           :options="billFilter.supplyCustom"> *@
        @*     <template v-slot:selected-item="scope"> *@
        @*         <q-icon :name="supplyTypeOptions[1].icon" :color="supplyTypeOptions[1].color"></q-icon> *@
        @*         {{ scope.opt.name }} *@
        @*         <q-badge outline class="on-right" color="primary" v-if="scope.opt.category"> *@
        @*             {{ scope.opt.category }} *@
        @*         </q-badge> *@
        @*     </template> *@
        @*     <template v-slot:option="scope"> *@
        @*         <q-item *@
        @*             v-bind="scope.itemProps" *@
        @*             v-on="scope.itemEvents"> *@
        @*             <div> *@
        @*                 <q-icon :name="supplyTypeOptions[1].icon" :color="supplyTypeOptions[1].color"></q-icon> *@
        @*                 {{ scope.opt.name }} *@
        @*                 <q-badge outline class="on-right" color="primary" v-if="scope.opt.category"> *@
        @*                     {{ scope.opt.category }} *@
        @*                 </q-badge> *@
        @*             </div> *@
        @*         </q-item> *@
        @*     </template> *@
        @* </q-select> *@
        
        <q-input outlined dense stack-label bg-color="white" style="min-width: 230px;"
                 readonly
                 class="col-xs-12 col-md-auto"
                 label="账目日期"
                 :value="billFilter.dateRange ? billFilter.dateRange.from + ' 至 ' + billFilter.dateRange.to : '' "
                 @@clear="v=>billFilter.dateRange = null">
            <template v-slot:append>
                <q-icon name="event" color="primary" class="cursor-pointer">
                    <q-popup-proxy transition-show="scale" transition-hide="scale">
                        <q-date range mask="YYYY-MM-DD"
                                v-model="billFilter.dateRange"
                                :options="dateRangeOptionsFn">
                            <div class="row items-center justify-end">
                                <q-btn v-close-popup :label="$q.lang.label.clear" color="warning" flat @@click="billFilter.dateRange = null"></q-btn>
                                <q-btn v-close-popup :label="$q.lang.label.close" color="primary" flat></q-btn>
                            </div>
                        </q-date>
                    </q-popup-proxy>
                </q-icon>
            </template>
        </q-input>
        <q-input outlined dense stack-label bg-color="white"
                 clearable
                 class="col-shrink"
                 label="关键词"
                 v-model="billFilter.keyname">
            <template v-slot:prepend>
                <q-icon name="fas fa-filter" color="primary" size="xs"/>
            </template>
        </q-input>
        <q-toggle class="col-shrink" toggle-indeterminate v-model="billFilter.isShow" color="orange" :label="stockIsShowOptions[1].name" left-label></q-toggle>
        <q-space></q-space>
        <q-btn :loading="billFilter.loading" class="col-shrink" color="primary" icon="search" label="搜索" @@click="loadStockData"></q-btn>
    </div>

    <div class="row q-gutter-xs q-mx-none q-my-sm">
        <q-btn class="q-mx-xs" color="primary" @@click="billExport"><q-icon class="on-left" size="xs" name="fas fa-file-export"></q-icon>导出</q-btn>
        <q-space ></q-space>
        <q-btn-dropdown :disable-main-btn="stockSelected.length === 0" color="warning" label="批量操作">
            <q-list>
                <q-item clickable v-close-popup @@click="stockMultipleAction(0)">
                    <q-item-section>
                        <q-item-label><q-icon class="on-left" size="xs" name="delete_forever"></q-icon>删除</q-item-label>
                    </q-item-section>
                </q-item>

                <q-item clickable v-close-popup @@click="stockMultipleAction(1)">
                    <q-item-section>
                        <q-item-label><q-icon class="on-left" size="xs" :name="stockIsShowOptions[0].icon"></q-icon>{{stockIsShowOptions[0].name}}</q-item-label>
                    </q-item-section>
                </q-item>

                <q-item clickable v-close-popup @@click="stockMultipleAction(2)">
                    <q-item-section>
                        <q-item-label><q-icon class="on-left" size="xs" :name="stockIsShowOptions[1].icon"></q-icon>{{stockIsShowOptions[1].name}}</q-item-label>
                    </q-item-section>
                </q-item>
            </q-list>
        </q-btn-dropdown>
    </div>
    <q-table
        :grid="!$q.platform.is.desktop"

        row-key="stockId"
        :data="stockData"
        :columns="stockColumns"

        selection="multiple"
        :selected.sync="stockSelected"

        :pagination.sync="billFilter.pagination"
        :rows-per-page-options="[10, 25, 50, 100, 200]"
        @@request="loadStockData">
        <template v-slot:body="props">
            <q-tr :props="props">
                <q-td>
                    <q-checkbox v-model="props.selected"></q-checkbox>
                </q-td>
                <q-td key="name">
                    <strong>{{ props.row.name }}</strong>
                </q-td>
                <q-td auto-width key="state">
                    {{ void (isDeliveryIndex = props.row.isDelivery ? 1 : 0, isShowIndex = props.row.isShow ? 1 : 0) }}
                    <q-icon size="sm" :name="stockIsShowOptions[isShowIndex].icon" :color="stockIsShowOptions[isShowIndex].color">
                        <q-tooltip>
                            {{ stockIsShowOptions[isShowIndex].name }}
                        </q-tooltip>
                    </q-icon>
                    <q-icon size="sm" :name="stockIsDeliveryOptions[isDeliveryIndex].icon" :color="stockIsDeliveryOptions[isDeliveryIndex].color">
                        <q-tooltip>
                            {{ stockIsDeliveryOptions[isDeliveryIndex].name }}
                        </q-tooltip>
                    </q-icon>
                </q-td>
            </q-tr>
        </template>
        <template v-slot:item="props">
            <div class="q-pa-xs col-xs-12 col-sm-6 col-md-4">
                <q-card>
                    <q-item dense class="q-px-sm">
                        <q-item-section side>
                            <q-checkbox dense v-model="props.selected"></q-checkbox>
                        </q-item-section>
                        <q-item-section style="display: inline-block;text-align: right">
                            {{ void (isDeliveryIndex = props.row.isDelivery ? 1 : 0, isShowIndex = props.row.isShow ? 1 : 0) }}
                            <q-icon size="sm" :name="stockIsShowOptions[isShowIndex].icon" :color="stockIsShowOptions[isShowIndex].color">
                                <q-tooltip>
                                    {{ stockIsShowOptions[isShowIndex].name }}
                                </q-tooltip>
                            </q-icon>
                            <q-icon size="sm" :name="stockIsDeliveryOptions[isDeliveryIndex].icon" :color="stockIsDeliveryOptions[isDeliveryIndex].color">
                                <q-tooltip>
                                    {{ stockIsDeliveryOptions[isDeliveryIndex].name }}
                                </q-tooltip>
                            </q-icon>
                        </q-item-section>
                    </q-item>
                    <q-separator></q-separator>
                    <q-card-section class="q-pa-sm">
                        <strong>{{ props.row.name }}</strong>
                    </q-card-section>
                </q-card>
            </div>
        </template>
    </q-table>
    <canvas id="pieProduct" style="width: 500px;height: 500px;"></canvas>
</q-page>


@section Scripts{
    <script src="https://cdn.jsdelivr.net/npm/@@antv/f2@3.8.6/dist/f2-all.min.js"
            asp-fallback-test="F2"
            asp-fallback-src="~/lib/antv/f2/dist/f2-all.min.js"></script>

    <script>
   var _page = {
       data:{
           billFilter:{
               loading:false,
               keyname:'',
               isShow:null,
               supplyCustom:[],
               supplyCurrent:{},
               pagination:{                   
                   page: 1,
                   rowsPerPage: 25,
                   rowsNumber:0,
               },
           },
           stockData:[],
           stockColumns:[
               {
                   align: 'left',
                   name:'name',
                   label:'卡号/说明',
               },
               {
                   align: 'left',
                   // format: (val, row) => `${row.isShow}`,
                   name:'state',
                   label:'状态'
               },
           ],
           stockSelected:[],
       },
       beforeMount(){
           
       },
       mounted(){
           //绘制图形要在mounted事件以后调用
           var data = [
             { name: 'QQ币', count: 8,amount:1441,profit:131,const: 'const' },
             { name: '魔兽点卡', count: 15,amount:342,profit:34,const: 'const' },
             { name: '不卡代理', count: 45,amount:245,profit:56,const: 'const' },
             { name: '网易游戏币', count: 56 ,amount:3500,profit:780,const: 'const'},
             { name: 'GoogleVoice帐号', count: 14,amount:189,profit:45,const: 'const' }
             ];
           this.loadPieProduct(data);
       },
       computed:{
       },
       methods: {
           loadPieProduct(data){
              var chart = new F2.Chart({
                id: 'pieProduct',
                pixelRatio: window.devicePixelRatio
              });
              chart.source(data);
              chart.coord('polar', {
                transposed: true,
                radius: 0.8,
                innerRadius: 0.6
              });
              chart.axis(false);
              chart.legend(false);
              chart.tooltip(false);
              chart.guide()
                .html({
                  position: [ '50%', '50%' ],
                  html: '<div style="text-align: center;width:150px;height: 50px;">\n      <p style="font-size: 12px;color: #999;margin: 0" id="name"></p>\n      <p style="font-size: 18px;color: #343434;margin: 0;font-weight: bold;" id="amount"></p>\n      </div>'
                });
              chart.interval()
                .position('const*count')//饼状图x用所有字段统一值的属性来实现合值的判断
                .adjust('stack')
                .color('name', [ 
                        '#1890FF',
                        '#13C2C2',
                        '#2FC25B',
                        '#FACC14',
                        '#F04864',
                        '#8543E0', ]);
              chart.pieLabel({
                sidePadding: 30,
                skipOverlapLabels:true,
                triggerOn:'click',
                activeShape: true,
                label1: (data)=> {
                  return {
                    text: data.count,
                    fill: '#343434',
                    fontWeight: 'bold'
                  };
                },
                label2:  (data)=> {
                  return {
                    text: data.name,
                    fill: '#999'
                  };
                },
                onClick:  (ev)=> {
                  const data = ev.data;
                  console.log(ev);
                  if (data) {
                    document.getElementById('name').innerText = data.name;
                    document.getElementById('amount').innerText = '￥' + data.amount +' 利润:'+data.profit;
                  }else{
                    //点击空白位置 重绘图标 移除激活对象
                    chart.repaint();
                  }
                }
              });
              chart.render();
                          
                          // const chart = new F2.Chart({
                          //   id: 'pieProduct',
                          //   pixelRatio: window.devicePixelRatio,
                          //   //plugins: PieLabel
                          // });
                          // chart.pieLabel({
                          //   anchorOffset: 0, // 锚点的偏移量
                          //   inflectionOffset: 0, // 拐点的偏移量
                          //   sidePadding: 0, // 文本距离画布左右两边的距离
                          //   //lineHeight: {Number}, // 文本的最大行高
                          //   //adjustOffset: {Number}, // 发生调整时的偏移量
                          //   skipOverlapLabels: false, // 是否不展示重叠的文本
                          //   //lineStyle: {Object}, // 连接线的样式
                          //   //anchorStyle: {Object}, // 锚点的样式
                          //   label1: (data, color)=>{
                          //               return {
                          //                 text: data.name, // 文本内容
                          //                 fill: color // 文本颜色
                          //               };
                          //             }, // label1 文本内容及其样式，Function 类型，回调函数
                          //   label2: (data, color)=>{
                          //                return {
                          //                  text: data.name, // 文本内容
                          //                  fill: color // 文本颜色
                          //                };
                          //              }, // label2 文本内容及其样式，Function 类型，回调函数
                          //   onClick: (ev)=>{console.log(ev);}, // 点击行为，回调函数
                          //   triggerOn: 'touchstart', // 点击行为触发的事件类型
                          //   activeShape: true, // 当有图形被选中的时候，是否激活图形
                          //   activeStyle: {Object}, // 设置激活图形的样式
                          //   //label1OffsetY: {Number}, // label1 与连接线在垂直方向的偏移量
                          //   //label2OffsetY: {Number}, // label2 与连接线在垂直方向的偏移量  
                          // });
                          // var data = [
                          //        { name: 'Sports', count: 275,amount:1441 },
                          //        { name: 'Strategy', count: 115,amount:342 },
                          //        { name: 'Action', count: 120,amount:245 },
                          //        { name: 'Shooter', count: 350 ,amount:3500},
                          //        { name: 'Other', count: 150,amount:189 },
                          //    ];
                          // chart.source(data);
                          //  chart.interval()
                          //    .position('amount')
                          //    .color('name', [ '#1890FF', '#13C2C2', '#2FC25B', '#FACC14', '#F04864', '#8543E0' ])
                          //    .adjust('stack')
                          //    .style({
                          //      lineWidth: 1,
                          //      stroke: '#fff',
                          //      lineJoin: 'round',
                          //      lineCap: 'round'
                          //    })
                          //    .animate({
                          //      appear: {
                          //        duration: 1200,
                          //        easing: 'bounceOut'
                          //      }
                          //    });
                          // 
                          //  chart.render();
           },
           loadStockData(){
               if(arguments.length>0 && arguments[0].pagination){
                   this.billFilter.pagination = arguments[0].pagination;
               }
               this.billFilter.loading =true;
               UserApi('StockPageList',{ supplyId:this.billFilter.supplyCurrent.supplyId,keyname:this.billFilter.keyname, pageSize:this.billFilter.pagination.rowsPerPage,pageIndex:this.billFilter.pagination.page,isShow:this.billFilter.isShow},true)
                  .then((response)=> {
                      if (response.data.code === 1){ 
                          this.stockData = response.data.data.rows;
                          this.billFilter.pagination.rowsNumber = response.data.data.total;   
                          this.stockSelected = [];
                      } else{
                          Notify.Warning('卡密数据加载失败');
                      }
                      this.billFilter.loading =false;
                  })
                  .catch( (error)=> {
                      this.billFilter.loading =false;
                      Notify.Warning('接口通信错误');
                      console.error(error);
                  });
           },
           billExport(){
               UserApi('StockExport',{ supplyId:this.billFilter.supplyCurrent.supplyId,keyname:this.billFilter.keyname, isShow:this.billFilter.isShow},true)
                  .then((response)=> {
                      if (response.data.code === 1){ 
                          var blob = new Blob([response.data.data], {type: "text/plain;charset=utf-8"});
                          saveAs(blob, Date.now().toString() + ".txt");
                      } else{
                          Notify.Warning('卡密数据导出失败');
                      }
                      this.billFilter.loading =false;
                  })
                  .catch( (error)=> {
                      this.billFilter.loading =false;
                      Notify.Warning('接口通信错误');
                      console.error(error);
                  });
           },
           billFilterReset(){
               this.billFilter.keyname='';
               this.billFilter.isShow=null;
               this.billFilter.supplyCurrent=this.billFilter.supplyCustom[0];
               this.billFilter.pagination.page =1;
               this.billFilter.pagination.rowsPerPage =25;
           },
           stockMultipleAction(action){
               var stockIds = _.map(this.stockSelected, 'stockId');
               this.billFilter.loading =true;
               UserApi('StockMultipleAction',{ stockIds:JSON.stringify(stockIds), action},true)
               .then((response)=> {
                     if (response.data.code === 1){ 
                         this.loadStockData();
                     } else{
                         Notify.Warning('操作执行失败');
                     }
                     this.billFilter.loading =false;
                 })
                 .catch( (error)=> {
                     this.billFilter.loading =false;
                     Notify.Warning('接口通信错误');
                     console.error(error);
                 });
           },
           dateRangeOptionsFn(date){
               var date_end = Quasar.date.formatDate(Date.now(),'YYYY/MM/DD');
               var date_start = Quasar.date.formatDate(Quasar.date.addToDate(Date.now(),{month:-3}),'YYYY/MM/DD');
               //console.log(date_start,date_end);
               return date >= date_start && date <= date_end;
           },   
       }
   };
   DeepMerge(_layout,_page);
   new Vue(_layout);
    </script>
}