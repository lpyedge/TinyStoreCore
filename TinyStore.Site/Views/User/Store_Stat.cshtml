<q-page padding>
    <div class="text-h5 text-weight-bold text-grey-8">
        <q-icon :name="storelinks[4].icon" size="md" class="on-left"></q-icon>{{storelinks[4].text}}
    </div>
    <q-separator class="q-my-sm"></q-separator>
    <div class="row q-gutter-xs q-my-sm">
        <q-input outlined dense stack-label bg-color="white" style="min-width: 230px;"
                 readonly
                 class="col-xs-12 col-md-auto"
                 label="统计日期"
                 :value="statFilter.dateRange ?  (Object.prototype.toString.call(statFilter.dateRange) === '[object String]' ? statFilter.dateRange + ' 至 ' + statFilter.dateRange : statFilter.dateRange.from + ' 至 ' + statFilter.dateRange.to)  : '' "
                 @@clear="v=>statFilter.dateRange = null">
            <template v-slot:append>
                <q-icon name="event" color="primary" class="cursor-pointer">
                    <q-popup-proxy transition-show="scale" transition-hide="scale">
                        <q-date range mask="YYYY-MM-DD"
                                v-model="statFilter.dateRange"
                                :options="dateRangeOptionsFn">
                            <div class="row items-center justify-between">
                                <div class="col-auto">
                                    <q-btn v-close-popup label="上月" color="accent" @@click="statFilter.dateRange = {from:Quasar.date.formatDate(Quasar.date.subtractFromDate(Quasar.date.adjustDate(Date.now(),{date:1}),{month:1}),'YYYY-MM-DD'),to:Quasar.date.formatDate(Quasar.date.subtractFromDate(Quasar.date.adjustDate(Date.now(),{date:1}),{days:1}),'YYYY-MM-DD')}" class="col-shrink self-start"></q-btn>
                                    <q-btn v-close-popup label="本月" color="accent" @@click="statFilter.dateRange = {from:Quasar.date.formatDate(Quasar.date.adjustDate(Date.now(),{date:1}),'YYYY-MM-DD'),to:Quasar.date.formatDate(Date.now(),'YYYY-MM-DD')}" class="col-shrink self-start"></q-btn>
                                </div>
                                <div class="col-auto">
                                    <q-btn v-close-popup :label="$q.lang.label.ok" color="primary" flat></q-btn>
                                </div>
                            </div>
                        </q-date>
                    </q-popup-proxy>
                </q-icon>
            </template>
        </q-input>
        <q-select outlined dense options-dense stack-label bg-color="white" style="min-width: 110px"
                 class="col-auto"
                  label="统计类型"
                  v-model="statFilter.statType"
                  emit-value
                  map-options
                  :options="statFilter.statTypeOptions">
        </q-select>
        <q-space></q-space>
        <q-btn :loading="statFilter.loading" class="col-shrink" color="primary" icon="search" label="搜索" @@click="loadStat"></q-btn>
    </div>

    <div class="row q-gutter-xs q-my-sm">
        <q-tabs 
            class="text-grey-8"
            active-color="primary"
            indicator-color="primary"
            content-class="text-h5"
            dense
            align="left"
            narrow-indicator
            inline-label
            v-model="statFiled"
            @@input="loadProductStat">
            <q-tab name="count" icon="local_grocery_store" label="订单量" ></q-tab>
            <q-tab name="amount" icon="fas fa-hand-holding-usd" label="收入" ></q-tab>
            <q-tab name="profit" icon="local_atm" label="利润" ></q-tab>
        </q-tabs>
    </div>
    <div class="row q-gutter-xs q-my-sm">
        <q-btn dense flat :label="postDataTotal.name" ></q-btn>
        <div class="text-caption">
            订单量<q-badge >{{ postDataTotal.count }}</q-badge>
        </div>
        <div class="text-caption">
            收入<q-badge >{{ postDataTotal.amount }}</q-badge>
        </div>
        <div class="text-caption">
            利润<q-badge >{{ postDataTotal.amount - postDataTotal.cost -postDataTotal.refundAmount }}</q-badge>
        </div>
    </div>
    <div class="row" style="height: 18rem;">
        <canvas id="productPie" class="col-xs-12 col-md-4"></canvas>
        <canvas id="productLine" class="col-xs-12 col-md-8"></canvas>
    </div>
</q-page>


@section Scripts{
    <script src="https://cdn.jsdelivr.net/npm/@@antv/f2@3.8.6/dist/f2-all.min.js"
            asp-fallback-test="window.F2"
            asp-fallback-src="~/lib/antv/f2/dist/f2-all.min.js"></script>

    <script>
   var _page = {
       data:{
           statFilter:{
               loading:false,
               statType:1,
               statFiled:'count',
               dateRange:{
                   from:Quasar.date.formatDate(Quasar.date.adjustDate(Date.now(),{date:1}),'YYYY-MM-DD'),
                   to:Quasar.date.formatDate(Date.now(),'YYYY-MM-DD')
               },
               statTypeOptions:[
                   {label:'商品统计',value:1},
                   //{label:'其他',value:2},
               ]
           },
           statDataAll:[],
           statFiled:'count',
           // postData:{
           //      name: '',
           //      count: 0,
           //      amount: 0,
           //      cost: 0,
           //      quantity: 0,
           //      refundAmount: 0,
           // },
           postDataTotal:{
                name: '合计',
                count: 0,
                amount: 0,
                cost: 0,
                profit:0,
                quantity: 0,
                refundAmount: 0,
           }
       },
       beforeMount(){
       },
       mounted(){
           this.loadStat();
       },
       computed:{
           
       },
       methods: {
           loadProductStat(){
              var typeColors =['#1890FF','#13C2C2','#2FC25B','#FACC14','#F04864','#8543E0'];
              var otherName = '其它';
              var dataAll = JSON.parse(JSON.stringify(this.statDataAll));
              this.postDataTotal={
                     name: '合计',
                     count: 0,
                     amount: 0,
                     cost: 0,
                     profit:0,
                     quantity: 0,
                     refundAmount: 0,
                };
              var statFiled = this.statFiled;
              
              var dataTotal = [];
              var dataDate = [];
              var dataGroup = _.groupBy(dataAll, 'name');
              for (name in dataGroup){
                   var data = {};
                   data.pieConst = 'fixed';
                   data.name = name;
                   data.count = _.sumBy(dataGroup[name], (o)=>{return o.count;});
                   data.amount = _.sumBy(dataGroup[name], (o)=>{return o.amount;});
                   data.cost = _.sumBy(dataGroup[name], (o)=>{return o.cost;});
                   data.quantity = _.sumBy(dataGroup[name], (o)=>{return o.quantity;});
                   data.refundAmount = _.sumBy(dataGroup[name], (o)=>{return o.refundAmount;});
                   data.profit = data.amount -data.cost -data.refundAmount ;
                   dataTotal.push(data);
                   this.postDataTotal.count += data.count ;
                   this.postDataTotal.amount += data.amount ;
                   this.postDataTotal.cost += data.cost ;
                   this.postDataTotal.quantity += data.quantity ;
                   this.postDataTotal.refundAmount += data.refundAmount ;
               }               
              var dataTotalSorted = _.orderBy(dataTotal, function(o) { return o[statFiled]; },['desc']);
              if (dataTotalSorted.length > typeColors.length){
                   var dataOther = {
                       name:otherName,
                       count:0,
                       amount:0,
                       cost:0,
                       profit:0,
                       quantity:0,
                       refundAmount:0,
                       pieConst:'fixed'
                   };
                   for(var i = typeColors.length; i < dataTotalSorted.length; i++) {
                     dataOther.count += dataTotalSorted[i].count;
                     dataOther.amount += dataTotalSorted[i].amount;
                     dataOther.cost += dataTotalSorted[i].cost;
                     dataOther.profit += dataTotalSorted[i].amount - dataTotalSorted[i].cost - dataTotalSorted[i].refundAmount;
                     dataOther.quantity += dataTotalSorted[i].quantity;
                     dataOther.refundAmount += dataTotalSorted[i].refundAmount;
                   }
                   dataTotalSorted.splice(typeColors.length,dataTotalSorted.length - typeColors.length);
                   dataTotalSorted.push(dataOther);
               }               
              dataTotalLimitSorted = _.orderBy(dataTotalSorted, function(o) { return o[statFiled]; },['desc']);
              var namesLimitSorted=_.map(dataTotalLimitSorted, 'name');
              var createDateGroup = _.groupBy(dataAll, 'createDate');

              for (date in createDateGroup){
                var dayDataOthers = _.filter(dataAll,(o)=>{return o.createDate === date && _.indexOf(namesLimitSorted, o.name) === -1;});
                var dayDataIncluds = _.filter(dataAll,(o)=>{return o.createDate === date && _.indexOf(namesLimitSorted, o.name) !== -1;});
                if(dayDataOthers.length > 0){
                    var dayDataOther = {
                        name: otherName,
                        createDate: date,
                        count: 0,
                        amount: 0,
                        cost: 0,
                        profit:0,
                        quantity: 0,
                        refundAmount: 0,
                    };
                    for(let i = 0; i < dayDataOthers.length; i++) {
                        dayDataOther.count += dayDataOthers[i].count;
                        dayDataOther.amount += dayDataOthers[i].amount;
                        dayDataOther.cost += dayDataOthers[i].cost;
                        dayDataOther.quantity += dayDataOthers[i].quantity;
                        dayDataOther.refundAmount += dayDataOthers[i].refundAmount;
                        dayDataOther.profit = dayDataOthers[i].amount - dayDataOthers[i].cost - dayDataOthers[i].refundAmount;
                        _.remove(dataAll,dayDataOthers[i]);
                    }
                    dataDate.push(dayDataOther);
                }                
                for(let i = 0; i < dayDataIncluds.length; i++) {
                  dataDate.push(dayDataIncluds[i]);
                }
              }

              var chartPie = new F2.Chart({
                id: 'productPie',
                pixelRatio: window.devicePixelRatio
              });
              chartPie.source(dataTotalLimitSorted);
              chartPie.coord('polar', {
                transposed: true,
                radius: 0.9,
                innerRadius: 0.6
              });
              chartPie.axis(false);
              chartPie.legend(false);
              chartPie.tooltip(false);
              chartPie.interval()
                .position('pieConst*'+statFiled)//饼状图x用所有字段统一值的属性来实现合值的判断
                .adjust('stack')
                .color('name', (name)=>{
                    var colorIndex = _.indexOf(namesLimitSorted, name);
                    return typeColors[colorIndex];
                });
              chartPie.pieLabel({
                sidePadding: 10,
                adjustOffset:15,
                skipOverlapLabels:false,
                label1: (data)=> {
                  return {
                    text: data[statFiled],
                    fill: '#343434',
                    fontWeight: 'bold'
                  };
                },
                label2:  (data)=> {
                  return {
                    text: data.name,
                    fill: '#999'
                  };
                },
                //triggerOn:'click',
                //activeShape: true,
                // onClick:  (ev)=> {
                //   const data = ev.data;
                //   console.log(ev);
                //   if (data) {
                //       if (this.postData.name !== data.name){                          
                //           this.postData.name = data.name;
                //           this.postData.count = data.count;
                //           this.postData.amount = data.amount;
                //           this.postData.cost = data.cost;
                //           this.postData.quantity = data.quantity;
                //           this.postData.refundAmount = data.refundAmount;
                //       }else{    
                //         chartPie.repaint();
                //         this.postData = JSON.parse(JSON.stringify(this.postDataTotal));
                //       }
                //   }else{
                //       chartPie.repaint();
                //     this.postData = JSON.parse(JSON.stringify(this.postDataTotal));
                //   }
                // }
              });
              // chartPie.guide()
              //   .html({
              //     position: [ '50%', '50%' ],
              //     html: '<div style="text-align: center;width:150px;height: 50px;">\n      <p style="font-size: 12px;color: #999;margin: 0" id="name"></p>\n      <p style="font-size: 18px;color: #343434;margin: 0;font-weight: bold;" id="amount"></p>\n      </div>'
              //   });
              chartPie.render();


              const chartLine = new F2.Chart({
                id: 'productLine',
                pixelRatio: window.devicePixelRatio
              });
              chartLine.source(dataDate);
              chartLine.scale('createDate', {
                type: 'timeCat',
                tickCount: 3
              });
              chartLine.scale(statFiled, {
                tickCount: 5
              });
              chartLine.axis('date', {
                label: function label(text, index, total) {
                  // 只显示每一年的第一天
                  const textCfg = {};
                  if (index === 0) {
                    textCfg.textAlign = 'left';
                  } else if (index === total - 1) {
                    textCfg.textAlign = 'right';
                  }
                  return textCfg;
                }
              });
              chartLine.tooltip({
                custom: true, // 自定义 tooltip 内容框
                onChange:  ()=> {
                  const legend = chartLine.get('legendController').legends.top[0];
                  const tooltipItems = obj.items;
                  const legendItems = legend.items;
                  const map = {};
                  legendItems.forEach(function(item) {
                    map[item.name] = _.clone(item);
                  });
                  tooltipItems.forEach(function(item) {
                    const name = item.name;
                    const value = item.value;
                    if (map[name]) {
                      map[name].value = value;
                    }
                  });
                  legend.setItems(_.values(map));
                },
                onHide: ()=> {
                  const legend = chartLine.get('legendController').legends.top[0];
                  legend.setItems(chartLine.getLegendItems().country);
                }
              });
              chartLine.legend({
                triggerOn: 'click'
              });
              chartLine.line()
              .position('createDate*'+statFiled)
              .color('name', (name)=>{
                  var colorIndex = _.indexOf(namesLimitSorted, name);
                  return typeColors[colorIndex];
              });
              chartLine.render();
           },
           loadStat(){
              var dateFrom='', dateTo='';
              if(this.statFilter.dateRange){
                  var dateRangeType = Object.prototype.toString.call(this.statFilter.dateRange);
                  if (dateRangeType === '[object String]'){
                       dateFrom = this.statFilter.dateRange;    
                       dateTo = this.statFilter.dateRange;                    
                  }else{
                       dateFrom = this.statFilter.dateRange.from;    
                       dateTo = this.statFilter.dateRange.to; 
                  }   
              }
              
              if (!dateFrom || !dateTo){
                  Notify.Warning('必须选择统计日期');
                  return;
              }
              
              this.statFilter.loading = true;
              UserApi('StoreStat',{ storeId:this.storeCurrent.storeId,from:dateFrom, to:dateTo,statType:this.statFilter.statType},true)
                 .then((response)=> {
                     if (response.data.code === 1){ 
                         switch (this.statFilter.statType){
                             case 1:
                                 this.statDataAll = response.data.data;
                                 this.loadProductStat();
                                 break;
                         }
                     } else{
                         Notify.Warning('统计数据加载错误');
                     }
                     this.statFilter.loading =false;
                 })
                 .catch( (error)=> {
                     this.statFilter.loading =false;
                     Notify.Warning('接口通信错误');
                     console.error(error);
                 });
           },
           billExport(){
               // UserApi('StockExport',{ supplyId:this.statFilter.supplyCurrent.supplyId,keyname:this.statFilter.keyname, isShow:this.statFilter.isShow},true)
               //    .then((response)=> {
               //        if (response.data.code === 1){ 
               //            var blob = new Blob([response.data.data], {type: "text/plain;charset=utf-8"});
               //            saveAs(blob, Date.now().toString() + ".txt");
               //        } else{
               //            Notify.Warning('卡密数据导出失败');
               //        }
               //        this.statFilter.loading =false;
               //    })
               //    .catch( (error)=> {
               //        this.statFilter.loading =false;
               //        Notify.Warning('接口通信错误');
               //        console.error(error);
               //    });
           },
           dateRangeOptionsFn(date){
               var date_end = Quasar.date.formatDate(Date.now(),'YYYY/MM/DD');
               var date_start = Quasar.date.formatDate(Quasar.date.addToDate(Date.now(),{month:-3}),'YYYY/MM/DD');
               //console.log(date_start,date_end);
               return date >= date_start && date <= date_end;
           },   
       }
   };
   DeepMerge(_layout,_page);
   new Vue(_layout);
    </script>
}