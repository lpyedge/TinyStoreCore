<q-page padding>
    <div class="text-h5 text-weight-bold text-grey-8">
        <q-icon :name="storelinks[2].icon" size="md" class="on-left"></q-icon>{{storelinks[2].text}}
    </div>
    <q-separator class="q-my-sm"></q-separator>
    <div class="row justify-end q-col-gutter-xs q-mx-none q-my-sm">
        <q-select outlined dense options-dense stack-label bg-color="white"
                  style="min-width: 180px"
                  class="col-xs-12 col-md-auto"
                  label="分类"
                  v-model="productFilter.category"
                  emit-value
                  map-options
                  :options="productFilter.categoryOptions">
        </q-select>
        <q-input outlined dense stack-label bg-color="white"
                 clearable
                 class="col-xs-grow col-md-shrink col-auto"
                 label="关键词"
                 v-model="productFilter.keyname">
            <template v-slot:prepend>
                <q-icon name="fas fa-filter" color="primary" size="xs"/>
            </template>
        </q-input>
        <q-toggle class="col-shrink" toggle-indeterminate v-model="productFilter.isShow" color="orange" :label="stockIsShowOptions[1].name" left-label></q-toggle>
    </div>
    <q-list animated class="row q-gutter-md q-ma-none">
        <q-card class="col-auto" bordered v-for="(item,i) in productListByFilter()">
            <q-item class="q-pa-xs" style="height:3rem;">
                <q-item-section >
                    <q-item-label class="text-subtitle1" :lines="1">
                        {{item.name}}
                    </q-item-label>
                    <q-item-label caption :lines="1">
                        {{item.category}}
                        <q-icon class="float-right" color="primary" :name="deliveryTypeOption(item.deliveryType).icon">
                            <q-tooltip>{{deliveryTypeOption(item.deliveryType).name}}</q-tooltip>
                        </q-icon>
                    </q-item-label>
                </q-item-section>
                <q-separator vertical class="q-mx-sm"></q-separator>
                <q-icon class="col-auto" name="fas fa-yen-sign" size="lg" color="primary"></q-icon>
                <q-item-section side>
                    <div class="col-4">
                        <q-badge class="float-right" color="accent">
                            {{parseFloat(item.cost).toFixed(2)}}
                        </q-badge>
                    </div>
                    <q-item-label class="col-8">
                        <label class="text-h6 text-primary">{{parseInt(item.amount)}}</label>
                        <label class="text-caption text-italic text-grey-8">.{{parseFloat(item.amount).toFixed(2).split('.')[1]}}</label>
                    </q-item-label>
                </q-item-section>
            </q-item>
            <q-separator ></q-separator>
            <q-card-section style="height: 4.7rem;width: 18rem;">
                <label class="ellipsis-2-lines" v-html="item.memo"></label>
            </q-card-section>
            <q-icon class="cursor-pointer absolute-bottom-right q-ma-xs" color="primary" size="1.4rem" name="zoom_out_map" @@click="productDialogShow(i)"></q-icon>
        </q-card>
        <q-card class="col-auto" style="width: 18rem;height: 8rem" bordered>
            <q-icon class="cursor-pointer absolute-center" name="add" size="xl" color="primary" @@click="productDialogShow(-1)"></q-icon>
        </q-card>
    </q-list>
</q-page>

<q-dialog v-model="productDialog">
    <q-card style="max-width: 500px; width: 500px;">
        <q-card-section class="row items-center q-pb-none">
            <div class="text-h6">商品详情</div>
            <q-space ></q-space>
            <q-btn icon="close" flat round dense v-close-popup></q-btn>
        </q-card-section>
        <q-card-section class="q-gutter-sm">
            <q-select outlined dense options-dense stack-label bg-color="white"
                      clearable use-input
                      label="货源"
                      ref="supplySelect"
                      v-model="productCurrent.supply"
                      :readonly="productIndex >= 0"
                      @@input="supplySelectChange"
                      @@clear="supplySelectChange(null)"
                      @@input-value="v=>{supply.keyname = v;$refs.supplySelect.showPopup();}"
                      :options="supplyOptions">
                <template v-slot:selected-item="scope">
                    <q-icon :name="supplyTypeOption(scope.opt).icon" :color="supplyTypeOption(scope.opt).color"></q-icon>
                    {{ scope.opt.name }}
                    <q-badge outline class="on-right" color="primary" v-if="scope.opt.category">
                        {{ scope.opt.category }}
                    </q-badge>
                </template>
                <template v-slot:option="scope">
                    <q-item
                        v-bind="scope.itemProps"
                        v-on="scope.itemEvents">
                        <div>
                            <q-icon :name="supplyTypeOption(scope.opt).icon" :color="supplyTypeOption(scope.opt).color"></q-icon>
                            {{ scope.opt.name }}
                            <q-badge outline class="on-right" color="primary" v-if="scope.opt.category">
                                {{ scope.opt.category }}
                            </q-badge>
                        </div>
                    </q-item>
                </template>
            </q-select>
            <q-input outlined dense stack-label bg-color="white"
                     label="商品名称"
                     :readonly="productCurrent.userId !== userExtend.userId"
                     v-model.trim="productCurrent.name"
                     ref="productCurrent_name"
                     :rules="[val => !!val || '必须输入商品名称',val => val.length <= 10 || '商品名称长度限制10位']">
            </q-input>
            <div class="row">
                <q-select outlined dense options-dense stack-label bg-color="white"
                          class="col"
                          label="商品分类"
                          use-input hide-selected fill-input @@input-value="createCategory"
                          v-model.trim="productCurrent.category"
                          emit-value
                          map-options
                          :options="productCategoryOptions">
                </q-select>
                <q-space class="col-auto q-mx-xs"></q-space>
                <q-select outlined dense options-dense stack-label bg-color="white"
                          class="col"
                          label="发货方式"
                          v-model="productCurrent.deliveryType"
                          emit-value
                          map-options
                          option-value="value"
                          option-label="name"
                          :readonly="productDialogReadonly"
                          :options="deliveryTypeOptions">
                    <template v-slot:selected-item="scope">
                        <q-chip
                            dense
                            class="transparent q-ma-none q-pa-none">
                            <q-icon class="on-left" color="primary" text-color="white" :name="scope.opt.icon" size="xs"></q-icon>
                            {{ scope.opt.name }}
                        </q-chip>
                    </template>
                    <template v-slot:option="scope">
                        <q-item
                            v-bind="scope.itemProps"
                            v-on="scope.itemEvents">
                            <q-chip
                                class="transparent q-ma-none q-pa-none">
                                <q-icon class="on-left" color="primary" text-color="white" :name="scope.opt.icon" size="xs"></q-icon>
                                {{ scope.opt.name }}
                            </q-chip>
                        </q-item>
                    </template>
                </q-select>
            </div>
            <div class="row">
                <div class="col column">
                    <div class="col row">
                        <q-input outlined dense stack-label bg-color="white"
                                 class="col"
                                 label="售价"
                                 hint="销售价格"
                                 v-model.number="productCurrent.amount"
                                 ref="productCurrent_amount"
                                 :rules="[val => !!val || '必须输入售价']">
                        </q-input>
                        <q-space class="col-auto q-mx-xs"></q-space>
                        <q-input outlined dense stack-label bg-color="white"
                                 class="col"
                                 label="成本"
                                 hint="结算价格"
                                 v-model.number="productCurrent.cost"
                                 :readonly="productDialogReadonly"
                                 ref="productCurrent_cost"
                                 :rules="[val => !!val || '必须输入成本']">
                        </q-input>
                    </div>
                    <div class="col row">
                        <q-input outlined dense stack-label bg-color="white"
                                 class="col"
                                 label="最小购买数量"
                                 v-model.number="productCurrent.quantityMin"
                                 ref="productCurrent_quantityMin"
                                 :rules="[val => !!val || '必须输入最小购买数量',val => val > 0 || '最小购买数量必须大于0']">
                        </q-input>
                        <q-space class="col-auto q-mx-xs"></q-space>
                        <div class="col">
                            <q-toggle v-model="productCurrent.isShow" color="primary" :label="stockIsShowOptions[1].name" left-label></q-toggle>
                        </div>
                    </div>
                </div>
                <q-space class="col-auto q-mx-xs"></q-space>
                <div class="col-auto">
                    <q-img basic style="border:1px solid grey;border-radius: 0.8rem; height: 6.5rem; width: 6.5rem"
                           class="cursor-pointer"
                           :src="productCurrent.icon"
                           spinner-color="white"
                           @@click="$refs.product_icon_pick.click()">
                        <q-icon class="absolute-top-right" color="orange-9" name="backup" size="sm"></q-icon>
                        @* <template v-slot:loading> *@
                        @*     <div class="text-subtitle1 text-white"> *@
                        @*         Loading... *@
                        @*     </div> *@
                        @* </template> *@
                        <template v-slot:error>
                            <div class="absolute-full flex flex-center bg-grey-2 text-primary">
                                暂无图标
                                <q-icon class="absolute-top-right" color="orange-9" name="backup" size="sm"></q-icon>
                            </div>
                        </template>
                    </q-img>
                    <input class="hidden" type="file" accept="image/*" ref="product_icon_pick" @@change="productIconUpload">
                </div>
            </div>
            @* <q-input outlined dense stack-label bg-color="white" *@
            @*          autogrow *@
            @*          label="商品说明" *@
            @*          v-model.trim="productCurrent.memo" *@
            @*          maxlength="4000"> *@
            @* </q-input> *@
            <q-editor v-model="productCurrent.memo" min-height="5rem" dense
                      placeholder="商品说明" 
                      :toolbar="editorToolbar"
                      :fonts="editorFonts"
                      >
            </q-editor>
        </q-card-section>
        <q-card-section class="row justify-between">
            <q-btn color="negative" icon="delete_forever" label="移除" @@click="productDialogRemove" v-if="productIndex >= 0"></q-btn>
            <q-space></q-space>
            <q-btn color="warning" icon="edit" :label="productIndex >= 0 ? '修改' : '新增'" @@click="productDialogEdit"></q-btn>
        </q-card-section>
    </q-card>
</q-dialog>

@section Scripts{

    <script src="https://cdn.staticfile.org/FileSaver.js/2.0.5/FileSaver.min.js"
            asp-fallback-test="saveAs"
            asp-fallback-src="~/lib/file-saver/dist/FileSaver.min.js"></script>

    <script>
   var _page = {
       data:{
           supply:{
             data:[],
             keyname:'',
           },
           productFilter:{
               keyname:'',
               category:'',
               categoryOptions:[],
               isShow:null,
               pagination:{
                   page: 1,
                   rowsPerPage: 25,
                   sortBy: 'name',
                   descending: true,
               },
           },
           productData:[],
           productColumns:[
               {
                   align: 'left',
                   name:'name',
                   label:'名称',
               },
               {
                   align: 'left',
                   // format: (val, row) => `${row.isShow}`,
                   name:'state',
                   label:'状态'
               },
           ],
           productSelected:[],
           
           productCategoryOptions:[],
           productDialog:false,
           productCurrent:{},
           productIndex:-2,//默认 -2 新增 -1 其他 索引值
       },
       beforeMount(){           
           UserApi("SupplyList",{},true)
              .then((response)=> {
                  if (response.data.code === 1){ 
                      this.supply.data = [];
                      for(i in response.data.data.supplyCustom){
                          this.supply.data.push(response.data.data.supplyCustom[i]);
                      }
                      for(i in response.data.data.supplySystem){
                          this.supply.data.push(response.data.data.supplySystem[i]);
                      }
                  } else{
                      Notify.Warning('货源数据加载失败');
                  }
              })
              .catch( (error)=> {
                  Notify.Warning('接口通信错误');
                  console.error(error);
              });
           UserApi('ProductList',{ storeId:this.storeCurrent.storeId },true)
              .then((response)=> {
                  if (response.data.code === 1){ 
                      this.productData = response.data.data;
                      this.productFilterReset();
                  } else{
                      Notify.Warning('商品数据加载失败');
                  }
              })
              .catch( (error)=> {
                  Notify.Warning('接口通信错误');
                  console.error(error);
              });
       },
       computed:{
           supplyOptions(){
               var data = [];
               var keyname = '';
               if (this.supply.keyname)
                   keyname = this.supply.keyname.trim().toLowerCase();
               if (keyname){
                   for (i in this.supply.data){
                       if (this.supply.data[i].name.toLowerCase().indexOf(keyname)>-1 
                       || this.supply.data[i].memo.toLowerCase().indexOf(keyname)>-1 
                       || this.supply.data[i].category.toLowerCase().indexOf(keyname)>-1)
                        data.push(this.supply.data[i]);
                   }
               }else{
                   for (i in this.supply.data){
                       data.push(this.supply.data[i]);
                   }
               }
               return data;
           },           
           productDialogReadonly(){
               return this.productCurrent.supplyId !== this.userExtend.userId.toString();
           }
       },
       methods: {
           supplyTypeOption(supply){
               if (supply.userId === 0){
                    return this.supplyTypeOptions[0];    
               }else{
                    return this.supplyTypeOptions[1];    
               }
           },
           createCategory(val){
               this.productCurrent.category = val;
           },
           supplySelectChange(v){
               if(v){ 
                   this.productCurrent.supplyId = v.supplyId;
                   this.productCurrent.cost = v.cost;
                   this.productCurrent.name = v.name;
                   this.productCurrent.memo = v.memo;
                   this.productCurrent.category = v.category;
                   this.productCurrent.deliveryType = v.deliveryType;                   
               } else { 
                   this.productCurrent.supplyId = this.userExtend.userId; 
                   this.productCurrent.cost = 0;
                   this.productCurrent.name = '';
                   this.productCurrent.memo = '';
                   this.productCurrent.category = '';
                   this.productCurrent.deliveryType = this.deliveryTypeOptions[1].value;
               }
           },
           productFilterReset(){
               this.productFilter.keyname='';
               this.productFilter.isShow=null;
               this.productFilter.pagination.page =1;
               this.productFilter.pagination.rowsPerPage =25;
               
               this.productFilter.categoryOptions = [];
               this.productCategoryOptions = [];
               this.productFilter.categoryOptions.push({label:"全部*",value:''});
               var datas = _.groupBy(this.productData, 'category');
               for (var categoty in datas) {
                   if(categoty){
                       this.productFilter.categoryOptions.push({label:categoty,value:categoty});
                       this.productCategoryOptions.push({label:categoty,value:categoty});
                   }
               }
           },        
           productListByFilter(){
               return _.filter(this.productData,(data)=>{                   
                   var res = true;
                   if (this.productFilter.category){
                        res = res && data.category === this.productFilter.category ;
                   }
                   var keyname = '';
                   if (this.productFilter.keyname)
                       keyname = this.productFilter.keyname.trim().toLowerCase();
                   if (keyname){
                       res = res && (data.name.toLowerCase().indexOf(keyname) > -1 || data.memo.toLowerCase().indexOf(keyname) > -1)
                   }
                   if (this.productFilter.isShow != null){
                        res = res &&  (data.isShow === this.productFilter.isShow);
                   }
                   return res;
               });
           },
           productDialogShow(i){
               this.productDialog=true;
               this.productIndex =i;
               if (i>=0){
                   this.productCurrent= JSON.parse(JSON.stringify(this.productData[i]));
                   if (this.productCurrent.supplyId !== this.userExtend.userId.toString()){    
                       var isfind = false;
                       for (i in this.supply.data){
                           if (this.supply.data[i].supplyId === this.productCurrent.supplyId){
                               this.productCurrent.supply = this.supply.data[i];
                               isfind = true;
                           }
                       }
                       if (!isfind){
                           this.productCurrent.supplyId = this.userExtend.userId.toString();
                       }
                   }
               }else{
                   //默认productId前端初始化然后向后端获取，获取成功使用后端获取的值，获取失败则用前端初始化的值
                   this.productCurrent = {productId:Date.now().toString(),userId:this.userExtend.userId,supplyId:this.userExtend.userId.toString(),category:'',memo : '',icon:'#',quantityMin:1, deliveryType:this.deliveryTypeOptions[0].value, isShow:true};
                   UserApi('NewDateId',{ state:1 },true)
                        .then((response)=> {
                            if (response.data.code === 1){ 
                                this.productCurrent.productId = response.data.data;
                            }
                        })
                        .catch( (error)=> {
                            Notify.Warning('接口通信错误');
                            console.error(error);
                        });
               }
           },
           productDialogEdit(){
               if (this.productCurrent.memo.length > 4000){
                   Notify.Warning('商品说明内容过长');
                   return;
               }
               this.$refs.productCurrent_name.validate();
               this.$refs.productCurrent_amount.validate();
               this.$refs.productCurrent_cost.validate();
               this.$refs.productCurrent_quantityMin.validate();
               if (!this.$refs.productCurrent_name.hasError 
                   && !this.$refs.productCurrent_amount.hasError 
                   && !this.$refs.productCurrent_cost.hasError 
                   && !this.$refs.productCurrent_quantityMin.hasError){
                   if (this.productIndex >= 0 ){
                       var index = 0;
                       for (i in this.productData){
                           if (index === this.productIndex){
                               this.$set(this.productData, i, JSON.parse(JSON.stringify(this.productCurrent)))
                               break;
                           }
                           index++;
                       }
                   }else if (this.productIndex === -1){
                       this.$set(this.productData, this.productData.length, JSON.parse(JSON.stringify(this.productCurrent)))
                   }
                   this.productListAutoSave();
                   this.productIndex = -2;
                   this.productDialog=false;
                   this.productCurrent = {};
               }
           },
           productDialogRemove(){
               this.$q.dialog({
                   title: '再次确认',
                   message: '确定要移除名称为['+this.productCurrent.name+']的商品?',
                   cancel: true,
                   persistent: true
                 }).onOk(() => {
                   if (this.productIndex !== -2){
                         var index = 0;
                         for (i in this.productData){                          
                             if (index === this.productIndex){
                                 this.productData.splice(i,1);
                                 break;
                             }
                             index++;
                         }
                         this.productListAutoSave();
                     }
                     this.productIndex = -2;
                     this.productDialog=false;
                     this.productCurrent = {};
                 })
           },
           productListAutoSave(){
               UserApi("ProductListSave?storeId="+this.storeCurrent.storeId, this.productData)
                  .then((response)=> {
                      if (response.data.code === 1){ 
                          this.productData  = response.data.data;
                          this.productFilterReset();
                      } else{
                          //Notify.Warning('保存失败，数据格式错误');
                      }
                  })
                  .catch( (error)=> {
                      Notify.Warning('接口通信错误');
                      console.error(error);
                  });
           },
           productIconUpload(){
               if (arguments.length === 1 && arguments[0].target && arguments[0].target.files && arguments[0].target.files.length === 1){                   
                   var file = arguments[0].target.files[0];                   
                   UserApi("UploadFormFile",{model:'Product',id:this.productCurrent.productId,name:'Icon', file},true)
                       .then((response)=> {
                             if (response.data.code === 1){                
                                 this.productCurrent.icon = response.data.data;
                             }
                             else if(response.data.code === 0){
                              Notify.Warning('未上传任何文件');
                           }else if(response.data.code === 15){
                              Notify.Warning('上传参数错误');
                           }else {
                              Notify.Warning('未知错误');
                           }
                           this.$refs.product_icon_pick.value = '';
                         })
                         .catch( (error)=> {
                             Notify.Warning('接口通信错误');
                             console.error(error);
                           this.$refs.store_logo_pick.value = '';
                         });
              }
           }
       }
   };
   DeepMerge(_layout,_page);
   new Vue(_layout);
    </script>
}